import numpy as np

# 生成0到11的数组，每个元素进行平方运算
a = np.arange(36) ** 2
print(a)
i = np.array([1, 5, 8, 9])
# 数组作为下标访问
print(a[i])


j = np.array([
        [3, 4],
        [9, 7]
    ])
# 二维数组作为下标，返回的数组跟它是一样的形状。用每一个元素作为下标从a数组取值，放在当前位置
print(a[j])


a = a.reshape(6, 6)
print(a)
i = np.array([
        [0, 1],
        [1, 2]
    ])
j = np.array([
        [2, 1],
        [3, 3]
    ])
# 返回的形状跟下标的数组形状最大的一致。用i的元素作为行，用j的元素作为列去查找数据
# 两个下标数组的形状完全一致或可以通过广播扩展到一致
# print(a[i, j])
# 返回一个与i形状相同的数组，用i的每个元素作为行坐标，用2作为列坐标
# print(a[i, 2])
# 用i的每一个元素作为行坐标，与每一个列查找数据。 i的每一行返回一个数组
print(a[i, ...])
# 遍历第一个维度的每一行，每一行都会返回一个与j形状相同的数组。 行坐标就用遍历行号，列坐标用j的每一个元素
# print(a[:, j])


